@using Presentation.Models.Entities
@using Presentation.Services
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject ShipmentService ShipmentService

<h3>Lista Pošiljki</h3>

<FilterShipment OnFiltered="UpdateFilteredShipments" />

@if (loading)
{
    <p>Učitavanje pošiljki...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="error">@error</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Ime</th>
                <th>Status Dostave</th>
                <th>Datum Kreiranja</th>
                <th>Datum Dostave</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shipment in shipments)
            {
                <tr>
                    <td>@shipment.Name</td>
                    <td>@shipment.DeliveryState</td>
                    <td>@shipment.CreatingDate.ToString("dd.MM.yyyy")</td>
                    <td>@shipment.DeliveryDate.ToString("dd.MM.yyyy")</td>
                    <td>
                        @if (isVisible)
                        {
                            <button @onclick="() => SaveIdAndNavigate(shipment.Id)">Update</button>
                        }
                    </td>
                    <td>
                        @if (isVisible)
                        {
                            <button @onclick="() => Delete(shipment.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Shipment> shipments = new();
    private bool loading = true;
    private string? error;
    private bool isVisible = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadShipments();
    }

    private async Task LoadShipments()
    {
        var token = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "token");

        if (string.IsNullOrEmpty(token))
        {
            isVisible = false;
        }
        else
        {
            isVisible = true;
        }

        try
        {
            shipments = await ShipmentService.GetAll();
        }
        catch (Exception ex)
        {
            error = $"Došlo je do greške: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void UpdateFilteredShipments(List<Shipment> filteredShipments)
    {
        shipments = filteredShipments; // Ažuriraj listu sa filtriranim pošiljkama
        StateHasChanged(); // Ažuriraj prikaz
    }

    private async Task Delete(Guid shipmentId)
    {
        try
        {
            await ShipmentService.Delete(shipmentId);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        catch(Exception ex)
        {
            error = $"Došlo je do greške: {ex.Message}";
        }
    }

    private async Task SaveIdAndNavigate(Guid shipmentId)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "shipmentId", shipmentId.ToString());
        Navigation.NavigateTo("/addShipment");
    }
}
